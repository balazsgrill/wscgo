variables:
  REPO_NAME: gitlab.com/grill-tamasi.hu/wscgo
  GO111MODULE: "on"
  VERSION: 0.3.2-beta1

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.


stages:
  - test
  - build
  - package
  - integration-test
  - deploy

test:rpizw:
  stage: test
  variables:
    GO111MODULE: "on"
  before_script:
    - echo $REPO_NAME
    - mkdir -p $GOPATH/src/
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$(dirname $REPO_NAME)
    - cd $GOPATH/src/$REPO_NAME
    - envsubst < cmd/wscgo/version.go.tpl > cmd/wscgo/version.go
  script:
    - go test ./...
  tags:
    - grill-tamasi
    - rpizw
    - golang  

compile:rpizw:
  stage: build
  variables:
    GO111MODULE: "on"
  before_script:
    - mkdir -p $GOPATH/src/
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$(dirname $REPO_NAME)
    - cd $GOPATH/src/$REPO_NAME
    - envsubst < cmd/wscgo/version.go.tpl > cmd/wscgo/version.go
  script:
    - go build -o $CI_PROJECT_DIR/wscgo-rpizw ./cmd/wscgo
  artifacts:
    paths:
      - wscgo-rpizw
  tags:
    - grill-tamasi
    - rpizw
    - golang

compile:opiz:
  stage: build
  variables:
    GO111MODULE: "on"
  before_script:
    - mkdir -p $GOPATH/src/
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$(dirname $REPO_NAME)
    - cd $GOPATH/src/$REPO_NAME
    - envsubst < cmd/wscgo/version.go.tpl > cmd/wscgo/version.go
  script:
    - go build -o $CI_PROJECT_DIR/wscgo-opiz ./cmd/wscgo
  artifacts:
    paths:
      - wscgo-opiz
  tags:
    - grill-tamasi
    - opiz
    - golang
    
package:opiz:
  stage: package
  dependencies:
    - compile:opiz
  script:
    - curl https://github.com/balazsgrill/WiringOP-Zero/releases/download/v2.0-softpwm/libwiringPi.so.2.0 --output libwiringPi.so.2.0
    - ln -s libwiringPi.so.2.0 libwiringPi.so
    - cp wscgo-opiz wscgo
    - envsubst < wscgo-opiz.cfg.tpl > wscgo-opiz.cfg
    - equivs-build wscgo-opiz.cfg
  artifacts:
    paths:
      - "*.deb"
  tags:
    - grill-tamasi
    - equivs

package:rpizw:
  stage: package
  dependencies:
    - compile:rpizw
  script:
    - cp wscgo-rpizw wscgo
    - envsubst < wscgo-rpizw.cfg.tpl > wscgo-rpizw.cfg
    - equivs-build wscgo-rpizw.cfg
  artifacts:
    paths:
      - "*.deb"
  tags:
    - grill-tamasi
    - equivs

integration-test:rpizw:
  stage: integration-test
  dependencies:
    - package:rpizw
  script:
    - dpkg --dry-run -i wscgo-rpizw_${VERSION}_armhf.deb
  tags:
    - grill-tamasi
    - rpizw

integration-test:opiz:
  stage: integration-test
  dependencies:
    - package:opiz
  script:
    - dpkg --dry-run -i wscgo-opiz_${VERSION}_armhf.deb
  tags:
    - grill-tamasi
    - opiz

deb:
  stage: deploy
  dependencies:
    - package:opiz
    - package:rpizw
  script:
    - curl -X PUT -T wscgo-opiz_${VERSION}_armhf.deb -u$BINTRAY_USER:$BINTRAY_APIKEY "https://api.bintray.com/content/balazsgrill/home/wscgo-opiz/${VERSION}/pool/main/w/wscgo-opiz/wscgo-opiz_${VERSION}_armhf.deb;deb_distribution=unstable;deb_component=main;deb_architecture=armhf;publish=1"
    - curl -X PUT -T wscgo-rpizw_${VERSION}_armhf.deb -u$BINTRAY_USER:$BINTRAY_APIKEY "https://api.bintray.com/content/balazsgrill/home/wscgo-rpizw/${VERSION}/pool/main/w/wscgo-rpizw/wscgo-rpizw_${VERSION}_armhf.deb;deb_distribution=unstable;deb_component=main;deb_architecture=armhf;publish=1"
  only:
    - master
  tags:
    - grill-tamasi
